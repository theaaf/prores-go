package prores

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestClamp10Bit(t *testing.T) {
	assert.EqualValues(t, 0x3ff, clamp10bit(1025))
	assert.EqualValues(t, 0, clamp10bit(-1))
}

func TestCodeParameters_Decode(t *testing.T) {
	bs := &Bitstream{
		Bytes: []byte{0x0a, 0xa6, 0x3f, 0xff, 0xff, 0xff},
	}

	var code int
	assert.True(t, CodeParameters(0xb8).Decode(bs, &code))
	assert.Equal(t, code, 649)
}

func TestDecodeCoefficients(t *testing.T) {
	b := []byte{
		0x17, 0x7a, 0x2, 0xf2, 0x80, 0xb7, 0xb0, 0x2e, 0x12, 0xc, 0x3b, 0x3, 0x3, 0x0, 0xc1, 0xe0,
		0xd1, 0xa0, 0x32, 0xe0, 0x6, 0x8d, 0x81, 0x8d, 0x20, 0x64, 0x50, 0x19, 0x30, 0x3, 0x26, 0x0,
		0x64, 0x40, 0xc, 0xdc, 0xe1, 0x39, 0x9f, 0x9a, 0xc2, 0xe2, 0x40, 0x66, 0xc1, 0xab, 0xb4,
		0x6, 0x8c, 0x36, 0xc8, 0x70, 0xc3, 0x8c, 0x87, 0x1c, 0x37, 0xf2, 0x80, 0xdb, 0x87, 0x1b,
		0x50, 0x1b, 0xf0, 0xe7, 0x21, 0xcf, 0xe, 0x72, 0x1c, 0xf0, 0xe7, 0xcf, 0x0, 0x4f, 0x81,
		0x3e, 0xa, 0xe4, 0x59, 0x8b, 0x24, 0x5b, 0x8b, 0x64, 0x5f, 0x8b, 0x64, 0x5b, 0x8b, 0x24,
		0x5b, 0x8b, 0xa4, 0x5d, 0x8b, 0xa4, 0x5d, 0x8b, 0xa0, 0x56, 0x1e, 0x1c, 0x89, 0x9, 0x24,
		0x90, 0x93, 0x49, 0x89, 0x34, 0x90, 0x92, 0x48, 0x89, 0x34, 0x98, 0x93, 0x49, 0x89, 0x34,
		0x98, 0x0, 0x54, 0x22, 0x14, 0x11, 0x8, 0x89, 0x11, 0x8, 0x8d, 0x11, 0x88, 0x91, 0x11, 0x88,
		0x91, 0x12, 0x8, 0x8d, 0x12, 0x8, 0x91, 0x12, 0x8, 0x91, 0x12, 0x0, 0x42, 0xd4, 0x68, 0xb5,
		0x68, 0xb5, 0x68, 0xb5, 0x68, 0xb5, 0x68, 0xb5, 0x68, 0xb5, 0x68, 0xb5, 0x68, 0x93, 0xc9,
		0xc9, 0x4c, 0xa4, 0x94, 0xca, 0x49, 0x5c, 0xa4, 0x94, 0xca, 0x49, 0x4c, 0xac, 0x95, 0xca,
		0xc9, 0x5c, 0xac, 0x1, 0x42, 0x5f, 0xb, 0xc9, 0x7c, 0xc4, 0x98, 0xcc, 0x49, 0x9c, 0xc4,
		0x98, 0xcc, 0x49, 0x8c, 0xcc, 0x99, 0xcc, 0xc9, 0x9c, 0xcc,
	}

	var coeffs [MaxBlocksPerSlice][64]int16
	assert.NoError(t, NewSliceDecoder().decodeCoefficients(&coeffs, b, 32, ProgressiveScanOrder))

	var expected [MaxBlocksPerSlice][64]int16
	for i, n := range []int16{
		-172, -171, -78, -77, -168, -166, -74, -69,
		-163, -161, -65, -63, -160, -163, -62, -61,
		-162, -162, -58, -60, -159, -158, -59, -58,
		-158, -158, -58, -58, -158, -158, -56, -54,
	} {
		expected[i][0] = n
	}
	for k, v := range map[int]int16{
		1:    -1,
		385:  -1,
		449:  -2,
		641:  -1,
		705:  -1,
		897:  1,
		961:  -2,
		1409: -1,
		8:    -102,
		72:   -103,
		136:  -2,
		264:  -105,
		328:  -106,
		520:  -109,
		584:  -110,
		776:  -110,
		840:  -108,
		904:  -1,
		1032: -109,
		1096: -110,
		1224: 2,
		1288: -112,
		1352: -112,
		1544: -112,
		1608: -112,
		1800: -112,
		1864: -112,
		1928: -1,
		1992: -1,
		16:   -39,
		80:   -40,
		272:  -41,
		336:  -41,
		528:  -42,
		592:  -42,
		784:  -44,
		848:  -42,
		1040: -42,
		1104: -41,
		1296: -42,
		1360: -43,
		1552: -43,
		1616: -43,
		1808: -43,
		1872: -43,
		1297: 1,
		24:   14,
		88:   15,
		280:  15,
		344:  15,
		536:  16,
		600:  16,
		792:  16,
		856:  15,
		1048: 15,
		1112: 14,
		1304: 16,
		1368: 16,
		1560: 16,
		1624: 16,
		1816: 16,
		1880: 16,
		32:   30,
		96:   31,
		288:  31,
		352:  31,
		544:  32,
		608:  32,
		800:  33,
		864:  32,
		1056: 33,
		1120: 33,
		1312: 32,
		1376: 33,
		1568: 33,
		1632: 33,
		1824: 33,
		1888: 33,
		40:   10,
		104:  10,
		296:  10,
		360:  10,
		552:  10,
		616:  10,
		808:  10,
		872:  10,
		1064: 10,
		1128: 10,
		1320: 10,
		1384: 10,
		1576: 10,
		1640: 10,
		1832: 10,
		1896: 10,
		48:   -16,
		112:  -16,
		304:  -17,
		368:  -17,
		560:  -17,
		624:  -17,
		816:  -18,
		880:  -17,
		1072: -17,
		1136: -17,
		1328: -17,
		1392: -18,
		1584: -18,
		1648: -18,
		1840: -18,
		1904: -18,
		56:   -20,
		120:  -20,
		312:  -20,
		376:  -21,
		568:  -21,
		632:  -21,
		824:  -22,
		888:  -21,
		1080: -21,
		1144: -21,
		1336: -21,
		1400: -22,
		1592: -22,
		1656: -22,
		1848: -22,
		1912: -22,
	} {
		expected[k/64][k%64] = v
	}

	assert.Equal(t, expected, coeffs)
}
